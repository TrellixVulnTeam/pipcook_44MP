#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const plugin_1 = require("../service/plugin");
commander_1.default
    .command('install <name>')
    .helpOption('--help', 'show help')
    .description('install the given plugin.')
    .option('--tuna', 'use tuna mirror to install python packages')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action((name, opts) => {
    plugin_1.install(name, opts);
});
commander_1.default
    .command('uninstall <name>')
    .helpOption('--help', 'show help')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .description('uninstall the given plugin')
    .action(plugin_1.uninstall);
commander_1.default
    .command('list')
    .helpOption('--help', 'show help')
    .description('list installed plugin')
    .option('-c|--category <name>', 'the plugin category')
    .option('-d|--datatype <datatype>', 'the plugin datatype')
    .option('-n|--name <name>', 'the plugin package name')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action(plugin_1.list);
commander_1.default
    .command('info <id>')
    .helpOption('--help', 'show help')
    .description('show plugin info by id')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action(plugin_1.info);
commander_1.default.parse(process.argv);
//# sourceMappingURL=pipcook-plugin.js.map