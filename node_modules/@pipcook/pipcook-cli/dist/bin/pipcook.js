#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(require("semver"));
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = __importDefault(require("commander"));
const child_process_1 = require("child_process");
const path_1 = require("path");
const pipcook_core_1 = require("@pipcook/pipcook-core");
const fs_extra_1 = require("fs-extra");
const job_1 = require("../service/job");
const init_1 = __importDefault(require("../actions/init"));
const serve_1 = __importDefault(require("../actions/serve"));
const board_1 = __importDefault(require("../actions/board"));
const dev_plugin_1 = __importDefault(require("../actions/dev-plugin"));
(function () {
    return __awaiter(this, void 0, void 0, function* () {
        // check node version
        if (!semver_1.default.gte(process.version, '10.0.0')) {
            console.log(chalk_1.default.red(`Pipcook requires node version higher than node 10.x. Howeverm your kicak node version is ${process.version}, ` +
                'Please update node.js'));
            return;
        }
        const pkg = require('../../package.json');
        const versionStr = [
            `Pipcook Tools   v${pkg.version} ${path_1.join(__dirname, '../../')}`
        ];
        const daemonPath = path_1.join(pipcook_core_1.constants.PIPCOOK_DAEMON_SRC, 'package.json');
        const boardPath = path_1.join(pipcook_core_1.constants.PIPCOOK_BOARD_SRC, 'package.json');
        if (yield fs_extra_1.pathExists(daemonPath)) {
            const daemonPkg = yield fs_extra_1.readJson(daemonPath);
            versionStr.push(`Pipcook Daemon  v${daemonPkg.version} ${pipcook_core_1.constants.PIPCOOK_DAEMON_SRC}`);
        }
        if (yield fs_extra_1.pathExists(boardPath)) {
            const boardPkg = yield fs_extra_1.readJson(boardPath);
            versionStr.push(`Pipboard        v${boardPkg.version} ${pipcook_core_1.constants.PIPCOOK_BOARD_SRC}`);
        }
        commander_1.default.version(versionStr.join('\n'), '-v, --version');
        commander_1.default
            .command('init [version]')
            .option('-c, --client <string>', 'specify your npm client.')
            .option('-b, --beta', 'use or update the beta version, if set, the option version will be ignored.')
            .option('--tuna', 'use tuna mirror to download miniconda at China.')
            .description('initialize the daemon and pipboard.')
            .action(init_1.default);
        commander_1.default
            .command('board')
            .description('open the pipboard')
            .action(board_1.default);
        commander_1.default
            .command('run <filename>')
            .option('--tuna', 'use tuna mirror to install python packages')
            .option('--output <dir>', 'the output directory name', 'output')
            .option('-h|--host-ip <ip>', 'the host ip of daemon')
            .option('-p|--port <port>', 'the port of daemon')
            .description('run pipeline with a json file.')
            .action(job_1.runAndDownload);
        commander_1.default
            .command('serve <dir>')
            .option('-p, --port <number>', 'port of server', 7682)
            .description('serve the model to predict')
            .action(serve_1.default);
        commander_1.default
            .command('bip')
            .description('boa packages installer')
            .action(() => {
            child_process_1.execSync(`./node_modules/.bin/bip ${process.argv.slice(3).join(' ')}`, {
                cwd: process.cwd()
            });
        });
        commander_1.default
            .command('plugin-dev')
            .option('-t, --type <type>', 'plugin type')
            .option('-n, --name <name>', 'project name')
            .description('initialize plugin development environment')
            .action(dev_plugin_1.default);
        commander_1.default
            .command('daemon', 'manage pipcook daemon service')
            .command('plugin', 'install one or more packages')
            .command('app', 'experimental PipApp Script')
            .command('job', 'operate the job bound to specific pipeline')
            .command('pipeline', 'operate on pipeline');
        commander_1.default.parse(process.argv);
    });
})();
//# sourceMappingURL=pipcook.js.map