#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const inquirer_1 = require("inquirer");
const pipeline_1 = require("../service/pipeline");
commander_1.default
    .command('list')
    .helpOption('--help', 'show help')
    .description('list all pipelines')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action(pipeline_1.list);
commander_1.default
    .command('info <id>')
    .helpOption('--help', 'show help')
    .description('info the pipeline by its id')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action(pipeline_1.info);
commander_1.default
    .command('create <file>')
    .helpOption('--help', 'show help')
    .description('create a pipeline')
    .option('-n|--name <name>', 'the pipeline name')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action(pipeline_1.create);
commander_1.default
    .command('update <id> <filename>')
    .helpOption('--help', 'show help')
    .description('update a pipeline')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action(pipeline_1.update);
commander_1.default
    .command('remove [id]')
    .helpOption('--help', 'show help')
    .description('remove all pipelines or specific 1 pipeline via id')
    .option('-y|--yes', 'remove jobs without confirmation')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action((id, opts) => __awaiter(void 0, void 0, void 0, function* () {
    if (id === 'all') {
        id = undefined;
    }
    const jobs = yield pipeline_1.listJobsByPipelineId(id, opts);
    let confirm = !!opts.yes;
    if (!opts.yes) {
        if (jobs.length > 0) {
            const answer = yield inquirer_1.prompt([
                {
                    type: 'confirm',
                    name: 'remove',
                    message: `${jobs.length} ${jobs.length > 1 ? 'jobs' : 'job'} which belong to the pipeline will be removed too, continue?`,
                    default: false
                }
            ]);
            confirm = answer.remove;
        }
        else {
            confirm = true;
        }
    }
    if (confirm) {
        return pipeline_1.remove(id, jobs, opts);
    }
}));
commander_1.default
    .command('install <pipeline>')
    .helpOption('--help', 'show help')
    .option('--tuna', 'use tuna mirror to install python packages')
    .option('-h|--host-ip <ip>', 'the host ip of daemon')
    .option('-p|--port <port>', 'the port of daemon')
    .action(pipeline_1.install)
    .description('install the plugins from a pipeline config file or url');
commander_1.default.parse(process.argv);
//# sourceMappingURL=pipcook-pipeline.js.map