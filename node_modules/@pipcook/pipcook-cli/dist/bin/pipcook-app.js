#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const common_1 = require("../utils/common");
const app_1 = require("../service/app");
const pipcook_core_1 = require("@pipcook/pipcook-core");
commander_1.default
    .command('compile <script.ts>')
    .description('compile the PipApp Script.')
    .action((srcPath) => __awaiter(void 0, void 0, void 0, function* () {
    const app = new app_1.AppProject(srcPath);
    yield app.initializeOrLoad();
    yield app.compileAndSave();
    const { pipelines } = app.manifest;
    console.info(`generated ${pipelines.length} pipelines, please click the following links to config them:`);
    pipelines.forEach(({ id, namespace }) => {
        console.info(`(${namespace.module}.${namespace.method}) > http://localhost:6927/index.html#/pipeline/info?pipelineId=${id}`);
    });
}));
commander_1.default
    .command('train <script.ts>')
    .description('start training the configured PipApp Script.')
    .action((srcPath) => __awaiter(void 0, void 0, void 0, function* () {
    const app = new app_1.AppProject(srcPath);
    yield app.initializeOrLoad();
    try {
        // ensure all plugins.
        common_1.logger.info(`checking and installing plugins for "${srcPath}"`);
        yield app.ensureAllPlugins({
            before: (name, version) => __awaiter(void 0, void 0, void 0, function* () {
                common_1.logger.start(`installing plugin ${name}@${version}`);
            }),
            after: (name, version) => __awaiter(void 0, void 0, void 0, function* () {
                common_1.logger.success(`${name}@${version} is installed.`);
            })
        });
        common_1.logger.info('all plugins are installed.');
        // and start running pipelines one by one.
        yield app.train({
            before: (id) => __awaiter(void 0, void 0, void 0, function* () {
                common_1.logger.start(`start running the pipeline(${id})`);
            }),
            after: (id, jobId) => __awaiter(void 0, void 0, void 0, function* () {
                common_1.logger.success(`pipeline is scheduled at job(${jobId})`);
            })
        });
    }
    catch (err) {
        common_1.logger.fail(err.message);
    }
}));
commander_1.default
    .command('status <script.ts>')
    .description('view status for the PipApp Script.')
    .action((srcPath) => __awaiter(void 0, void 0, void 0, function* () {
    const app = new app_1.AppProject(srcPath);
    yield app.initializeOrLoad();
    const jobs = yield app.getJobs();
    jobs.forEach((job) => {
        console.info(`job(${job.id}):`);
        console.info(`  pipeline: http://localhost:6927/index.html#/pipeline/info?pipelineId=${job.pipelineId}`);
        if (job.status === pipcook_core_1.PipelineStatus.INIT) {
            console.info(`  status: initialize`);
        }
        else if (job.status === pipcook_core_1.PipelineStatus.RUNNING) {
            console.info(`  status: running`);
        }
        else if (job.status === pipcook_core_1.PipelineStatus.SUCCESS) {
            console.info(`  status: success`);
            console.info(`  evaluate: ${job.evaluateMap}`);
        }
        else if (job.status === pipcook_core_1.PipelineStatus.FAIL) {
            console.info(`  status: failure`);
            console.info(`  error: ${job.error}`);
        }
    });
}));
commander_1.default
    .command('build <script.ts>')
    .description('build the executable from trained PipApp Project.')
    .option('--tuna', 'use tuna mirror to download miniconda at China.')
    .action((srcPath, { tuna }) => __awaiter(void 0, void 0, void 0, function* () {
    const app = new app_1.AppProject(srcPath);
    yield app.initializeOrLoad();
    try {
        yield app.buildExecutable({ tuna });
    }
    catch (err) {
        console.error(err.message);
    }
}));
commander_1.default.parse(process.argv);
//# sourceMappingURL=pipcook-app.js.map