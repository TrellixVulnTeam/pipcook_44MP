"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const pipcook_core_1 = require("@pipcook/pipcook-core");
const common_1 = require("../utils/common");
/**
 * prepare a working dir for developer to develop plugins
 */
const devPlugin = ({ type, name }) => __awaiter(void 0, void 0, void 0, function* () {
    if (!type) {
        console.log('Please provide a plugin type');
        return process.exit(1);
    }
    if (!pipcook_core_1.constants.PLUGINS.includes(type)) {
        console.warn(chalk_1.default.red(`Unsupported plugin type: "${type}", it must be one of: \n${pipcook_core_1.constants.PLUGINS.join(',\n')}`));
        return process.exit(1);
    }
    if (typeof name !== 'string') {
        name = 'template-plugin';
    }
    let dirname;
    try {
        dirname = path_1.default.join(process.cwd(), name);
        if (fs_extra_1.default.existsSync(dirname)) {
            return common_1.logger.fail(`a directory or file called ${name} already exists. Please use a new working directory`);
        }
        fs_extra_1.default.ensureDirSync(path_1.default.join(dirname, 'src'));
        fs_extra_1.default.copyFileSync(path_1.default.join(__dirname, '..', 'assets', 'pluginPackage', 'package.json'), path_1.default.join(dirname, 'package.json'));
        fs_extra_1.default.copyFileSync(path_1.default.join(__dirname, '..', 'assets', 'pluginPackage', 'tsconfig.json'), path_1.default.join(dirname, 'tsconfig.json'));
        fs_extra_1.default.copyFileSync(path_1.default.join(__dirname, '..', 'assets', 'pluginPackage', 'src', `${type}.ts`), path_1.default.join(dirname, 'src', `index.ts`));
        console.log('success');
    }
    catch (e) {
        console.error(e);
        fs_extra_1.default.removeSync(dirname);
    }
});
exports.default = devPlugin;
//# sourceMappingURL=dev-plugin.js.map