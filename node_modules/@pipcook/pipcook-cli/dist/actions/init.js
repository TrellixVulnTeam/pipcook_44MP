"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const child_process_1 = require("child_process");
const fs_extra_1 = __importStar(require("fs-extra"));
const inquirer_1 = require("inquirer");
const command_exists_1 = require("command-exists");
const pipcook_core_1 = require("@pipcook/pipcook-core");
const common_1 = require("../utils/common");
const config_1 = require("../config");
const { BOA_CONDA_INDEX, BOA_CONDA_MIRROR } = common_1.Constants;
function npmInstall(npmClient, name, cwd, env) {
    return __awaiter(this, void 0, void 0, function* () {
        child_process_1.execSync(`"${npmClient}" init -f`, { cwd, env, stdio: 'ignore' });
        const cmd = `"${npmClient}" install ${name} -E --production`;
        child_process_1.execSync(cmd, { cwd, env, stdio: 'inherit' });
    });
}
/**
 * init the plugin project with boa and core
 */
function initPlugin(daemonDir, pluginDir) {
    return __awaiter(this, void 0, void 0, function* () {
        yield fs_extra_1.ensureDir(pluginDir);
        if (!(yield fs_extra_1.pathExists(path_1.join(pluginDir, 'package.json')))) {
            child_process_1.execSync('npm init -y', { cwd: pluginDir, stdio: 'ignore' });
        }
        if (!(yield fs_extra_1.pathExists(daemonDir))) {
            return common_1.logger.warn('daemon is not installed.');
        }
        let boa = path_1.join(daemonDir, 'node_modules/@pipcook/boa');
        if (!(yield fs_extra_1.pathExists(boa))) {
            boa = path_1.join(daemonDir, 'node_modules/@pipcook/daemon/node_modules/@pipcook/costa/node_modules/@pipcook/boa');
            if (!(yield fs_extra_1.pathExists(boa))) {
                return common_1.logger.warn('boa is not installed.');
            }
        }
        let core = path_1.join(daemonDir, 'node_modules/@pipcook/pipcook-core');
        if (!(yield fs_extra_1.pathExists(core))) {
            core = path_1.join(daemonDir, 'node_modules/@pipcook/daemon/node_modules/@pipcook/pipcook-core');
            if (!(yield fs_extra_1.pathExists(core))) {
                return common_1.logger.warn('pipcook-core is not installed.');
            }
        }
        yield fs_extra_1.ensureDir(path_1.join(pluginDir, 'node_modules/@pipcook'));
        const boaPlugin = path_1.join(pluginDir, 'node_modules/@pipcook/boa');
        const corePlugin = path_1.join(pluginDir, 'node_modules/@pipcook/core');
        let pluginPackage = yield fs_extra_1.readJson(path_1.join(pluginDir, 'package.json'));
        if (!pluginPackage) {
            pluginPackage = {};
        }
        if (!pluginPackage.dependencies || typeof pluginPackage.dependencies !== 'object') {
            pluginPackage.dependencies = {};
        }
        if (!(yield fs_extra_1.pathExists(boaPlugin))) {
            yield fs_extra_1.symlink(boa, boaPlugin);
            const boaPackage = yield fs_extra_1.readJson(path_1.join(boaPlugin, 'package.json'));
            pluginPackage.dependencies[boaPackage.name] = boaPackage.version;
        }
        if (!(yield fs_extra_1.pathExists(corePlugin))) {
            yield fs_extra_1.symlink(core, corePlugin);
            const corePackage = yield fs_extra_1.readJson(path_1.join(corePlugin, 'package.json'));
            pluginPackage.dependencies[corePackage.name] = corePackage.version;
        }
        yield fs_extra_1.writeJson(path_1.join(pluginDir, 'package.json'), pluginPackage, { spaces: 2 });
    });
}
/**
 * install all dependencies of pipcook into working dir
 */
const init = (version, { beta, client, tuna }) => __awaiter(void 0, void 0, void 0, function* () {
    let npmClient = 'npm';
    if (beta) {
        version = 'beta';
    }
    const npmInstallEnvs = Object.assign({}, process.env);
    if (tuna) {
        npmInstallEnvs.BOA_CONDA_INDEX = BOA_CONDA_INDEX;
        npmInstallEnvs.BOA_CONDA_MIRROR = BOA_CONDA_MIRROR;
        common_1.logger.info(`switch conda index: ${npmInstallEnvs.BOA_CONDA_INDEX}`);
        common_1.logger.info(`switch conda mirror: ${npmInstallEnvs.BOA_CONDA_MIRROR}`);
    }
    if (client) {
        npmClient = client;
        if (!config_1.optionalNpmClients.includes(npmClient)) {
            return common_1.logger.fail(`uknown npm client: ${npmClient}, available clients: ${config_1.optionalNpmClients.join(',')}.`);
        }
    }
    else {
        const clientChoices = [];
        for (const npmClient of config_1.optionalNpmClients) {
            if (command_exists_1.sync(npmClient)) {
                clientChoices.push(npmClient);
            }
        }
        if (clientChoices.length === 1) {
            npmClient = clientChoices[0];
        }
        else if (clientChoices.length > 1) {
            const answer = yield inquirer_1.prompt([
                {
                    type: 'list',
                    name: 'client',
                    message: 'which client do you want to use?',
                    choices: clientChoices
                }
            ]);
            npmClient = answer.client;
        }
        else {
            return common_1.logger.fail(`no npm client detected`);
        }
    }
    // Install the daemon.
    try {
        yield fs_extra_1.remove(pipcook_core_1.constants.PIPCOOK_DAEMON);
        yield fs_extra_1.ensureDir(pipcook_core_1.constants.PIPCOOK_DAEMON);
        if (tuna) {
            // write the daemon config
            yield fs_extra_1.default.writeJSON(path_1.join(pipcook_core_1.constants.PIPCOOK_HOME_PATH, 'daemon.config.json'), {
                env: {
                    BOA_CONDA_MIRROR
                }
            }, {
                spaces: 2
            });
        }
        let daemon = config_1.daemonPackage;
        if (version) {
            daemon += `@${version}`;
        }
        yield npmInstall(npmClient, daemon, pipcook_core_1.constants.PIPCOOK_DAEMON, npmInstallEnvs);
        yield initPlugin(pipcook_core_1.constants.PIPCOOK_DAEMON, pipcook_core_1.constants.PIPCOOK_PLUGINS);
        common_1.logger.success('Pipcook is ready, you can try "pipcook --help" to get started.');
    }
    catch (err) {
        common_1.logger.fail(`failed to initialize Pipcook with the error ${err && err.stack}`, false);
        yield fs_extra_1.remove(pipcook_core_1.constants.PIPCOOK_DAEMON);
    }
});
exports.default = init;
//# sourceMappingURL=init.js.map