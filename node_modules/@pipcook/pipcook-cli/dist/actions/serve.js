"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fastify_1 = __importDefault(require("fastify"));
const path_1 = __importDefault(require("path"));
const child_process_1 = __importDefault(require("child_process"));
const common_1 = require("../utils/common");
const fastify = fastify_1.default({ logger: true });
const serve = function serve(dir, { port = 7682 }) {
    return __awaiter(this, void 0, void 0, function* () {
        let predictFn;
        const model = path_1.default.join(process.cwd(), dir);
        try {
            predictFn = require(model);
        }
        catch (err) {
            return common_1.logger.fail(`the path specified is not a valid pipcook deploy path`);
        }
        child_process_1.default.execSync('npm install', {
            cwd: model,
            stdio: 'inherit'
        });
        fastify.post('/', (req) => __awaiter(this, void 0, void 0, function* () {
            const result = yield predictFn(req.body.data);
            return {
                result: result
            };
        }));
        const start = () => __awaiter(this, void 0, void 0, function* () {
            try {
                yield fastify.listen(port);
                console.log(`predict server is starting. Please send POST HTTP request to ${port}`);
            }
            catch (err) {
                return process.exit(1);
            }
        });
        start();
    });
};
exports.default = serve;
//# sourceMappingURL=serve.js.map