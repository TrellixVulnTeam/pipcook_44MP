"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = exports.installPackageFromConfig = exports.remove = exports.listJobsByPipelineId = exports.update = exports.create = exports.info = exports.list = void 0;
const path = __importStar(require("path"));
const Url = __importStar(require("url"));
const sdk_1 = require("@pipcook/sdk");
const pipcook_core_1 = require("@pipcook/pipcook-core");
const fs_extra_1 = require("fs-extra");
const plugin_1 = require("./plugin");
const common_1 = require("../utils/common");
const request_1 = require("../utils/request");
function list(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        let pipelines = yield client.pipeline.list();
        if (pipelines.length > 0) {
            console.table(pipelines, ['id', 'name', 'updatedAt', 'createdAt']);
        }
        else {
            console.info('no pipeline is created.');
        }
    });
}
exports.list = list;
function info(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        try {
            const pipeline = yield client.pipeline.getConfig(id);
            console.info(JSON.stringify(pipeline, null, 2));
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.info = info;
function create(filename, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        if (!path.isAbsolute(filename)) {
            filename = path.join(process.cwd(), filename);
        }
        const config = yield fs_extra_1.readJson(filename);
        try {
            const pipeline = yield client.pipeline.create(config, { name: opts.name });
            common_1.logger.success(`pipeline ${pipeline.id} created.`);
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.create = create;
function update(id, filename, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        if (!path.isAbsolute(filename)) {
            filename = path.join(process.cwd(), filename);
        }
        const config = yield fs_extra_1.readJson(filename);
        try {
            const pipeline = yield client.pipeline.update(id, config);
            common_1.logger.success(`pipeline ${pipeline.id} updated with ${filename}.`);
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.update = update;
function listJobsByPipelineId(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        let jobs;
        if (id === undefined) {
            jobs = yield client.job.list();
        }
        else {
            jobs = yield client.job.list({ pipelineId: id });
        }
        return jobs;
    });
}
exports.listJobsByPipelineId = listJobsByPipelineId;
function remove(id, jobs, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        try {
            yield client.pipeline.remove(id);
            common_1.logger.info(`${jobs.length} ${jobs.length > 1 ? 'jobs' : 'job'} removed.`);
            common_1.logger.success(id ? `pipeline ${id} has removed.` : `all pipelines removed.`);
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.remove = remove;
function installPackageFromConfig(config, opts) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        for (const plugin of pipcook_core_1.constants.PLUGINS) {
            const packageName = (_a = config.plugins[plugin]) === null || _a === void 0 ? void 0 : _a.package;
            if (typeof packageName === 'string') {
                const pkg = yield plugin_1.install(packageName, opts);
                config.plugins[plugin].package = pkg.name;
            }
        }
    });
}
exports.installPackageFromConfig = installPackageFromConfig;
function install(filename, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        common_1.logger.start(`start install pipeline from ${filename}`);
        let fileUrl;
        try {
            fileUrl = yield common_1.parseConfigFilename(filename);
            filename = fileUrl.href;
        }
        catch (err) {
            return common_1.logger.fail(err.message);
        }
        let pipeline;
        try {
            if (fileUrl.protocol === 'file:') {
                const url = Url.parse(filename);
                const config = yield fs_extra_1.readJson(url.path);
                common_1.logger.start('installing plugins');
                yield installPackageFromConfig(config, opts);
                common_1.logger.info('start to create pipeline');
                pipeline = yield client.pipeline.create(config);
                common_1.logger.success(`pipeline is created: ${pipeline.id}`);
            }
            else {
                common_1.logger.start(`downloading pipeline config file form ${filename}`);
                const stream = yield request_1.getFile(filename);
                const config = yield common_1.streamToJson(stream);
                common_1.logger.start('installing plugins');
                yield installPackageFromConfig(config, opts);
                common_1.logger.info('start to create pipeline');
                pipeline = yield client.pipeline.create(config);
                common_1.logger.success(`pipeline is created: ${pipeline.id}`);
            }
            // check the installation
            common_1.logger.info('check plugin:');
            let isSuccess = true;
            yield Promise.all(pipcook_core_1.constants.PLUGINS.map((plugin) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                // if use pipeline[plugin], error throw:
                // TS2536: Type 'PluginTypeI' cannot be used to index type 'PipelineResp'.
                const pluginName = pipeline[plugin];
                if (!pluginName) {
                    return;
                }
                const plugins = yield client.plugin.list({ name: pluginName });
                if (plugins.length > 0 && plugins[0].status === pipcook_core_1.PluginStatus.INSTALLED) {
                    common_1.logger.success(`${pluginName} installed.`);
                }
                else {
                    isSuccess = false;
                    common_1.logger.fail(`${pluginName} ${sdk_1.PluginStatusValue[((_a = plugins[0]) === null || _a === void 0 ? void 0 : _a.status) || pipcook_core_1.PluginStatus.FAILED]}.`, false);
                }
            })));
            if (isSuccess) {
                common_1.logger.success('pipeline installed successfully.');
            }
            else {
                common_1.logger.fail('pipeline installed field');
            }
        }
        catch (err) {
            common_1.logger.fail(`install pipeline error: ${err.message}`);
        }
    });
}
exports.install = install;
//# sourceMappingURL=pipeline.js.map