"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runAndDownloadById = exports.runAndDownload = exports.runByPipelineId = exports.runByFile = exports.log = exports.stop = exports.remove = exports.list = void 0;
const path_1 = require("path");
const fs = __importStar(require("fs-extra"));
const pipcook_core_1 = require("@pipcook/pipcook-core");
const sdk_1 = require("@pipcook/sdk");
const request_1 = require("../utils/request");
const pipeline_1 = require("./pipeline");
const config_1 = require("../config");
const common_1 = require("../utils/common");
function list(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        const jobs = yield client.job.list();
        if (jobs.length > 0) {
            console.table(jobs.map((job) => {
                return Object.assign(Object.assign({}, job), { status: sdk_1.JobStatusValue[job.status] });
            }), ['id', 'pipelineId', 'status', 'evaluatePass', 'createdAt']);
        }
        else {
            common_1.logger.info('no job is created.');
        }
    });
}
exports.list = list;
function remove(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        common_1.logger.start('removing jobs...');
        try {
            if (id === 'all') {
                id = undefined;
            }
            yield client.job.remove(id);
            common_1.logger.success('remove jobs successfully');
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.remove = remove;
function stop(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        common_1.logger.start('stopping jobs...');
        try {
            yield client.job.cancel(id);
            common_1.logger.success('stop job successfully');
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.stop = stop;
function log(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        try {
            const log = yield client.job.log(id);
            common_1.logger.info(JSON.stringify(log));
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.log = log;
function runByFile(filename, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        let config;
        common_1.logger.start(`run pipeline from ${filename}`);
        try {
            const fileUrl = yield common_1.parseConfigFilename(filename);
            if (fileUrl.protocol === 'file:') {
                if (!path_1.isAbsolute(filename)) {
                    filename = path_1.join(process.cwd(), filename);
                }
                try {
                    config = yield fs.readJson(filename);
                    if (typeof (config === null || config === void 0 ? void 0 : config.plugins) !== 'object') {
                        throw new Error('pipeline config file format error');
                    }
                }
                catch (err) {
                    common_1.logger.fail(`read pipeline config file error: ${err.message}`);
                }
            }
            else if (['http:', 'https:'].indexOf(fileUrl.protocol) >= 0) {
                common_1.logger.start('downloading pipeline config file');
                try {
                    const stream = yield request_1.getFile(filename);
                    config = yield common_1.streamToJson(stream);
                }
                catch (err) {
                    common_1.logger.fail(`fetch config failed: ${err.message}`);
                }
            }
            else {
                common_1.logger.fail('unsupported file uri');
            }
            yield pipeline_1.installPackageFromConfig(config, opts);
            common_1.logger.info('start to create pipeline');
            const pipeline = yield client.pipeline.create(config);
            common_1.logger.success(`pipeline is created: ${pipeline.id}, installing`);
            const installingResp = yield client.pipeline.install(pipeline.id, { pyIndex: opts.tuna ? config_1.tunaMirrorURI : undefined });
            yield client.pipeline.traceEvent(installingResp.traceId, common_1.traceLogger);
            common_1.logger.success('pipeline installed successfully, start to run job');
            return runByPipelineId(pipeline.id, opts);
        }
        catch (err) {
            common_1.logger.fail(`something wrong when run job: ${err.message}`);
        }
    });
}
exports.runByFile = runByFile;
function runByPipelineId(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        common_1.logger.start(`run pipeline from pipeline ${id}`);
        try {
            const jobRunning = yield client.job.run(id);
            common_1.logger.success(`job is created: ${jobRunning.id}, running`);
            yield client.pipeline.traceEvent(jobRunning.traceId, common_1.traceLogger);
            const job = yield client.job.get(jobRunning.id);
            if (job.status === pipcook_core_1.PipelineStatus.SUCCESS) {
                common_1.logger.success('job is finished successfully');
                return job;
            }
            else if (job.status === pipcook_core_1.PipelineStatus.FAIL) {
                common_1.logger.fail(`job is failed: ${job.error}`);
            }
            else {
                common_1.logger.fail(`invalid job status: ${job.status}`);
            }
        }
        catch (err) {
            common_1.logger.fail(`something wrong when run job: ${err.message}`);
        }
    });
}
exports.runByPipelineId = runByPipelineId;
function download(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        const outputRootPath = path_1.join(process.cwd(), opts.output || 'output');
        common_1.logger.info(`start to download output to ${outputRootPath}`);
        // remove the output dir
        yield fs.remove(outputRootPath);
        try {
            // generate output
            const fileDownloadResp = yield client.job.downloadOutput(id);
            yield common_1.extractToPath(fileDownloadResp.stream, outputRootPath);
            common_1.logger.success('download finished');
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
function runAndDownload(filename, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const job = yield runByFile(filename, opts);
        yield download(job.id, opts);
    });
}
exports.runAndDownload = runAndDownload;
function runAndDownloadById(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const job = yield runByPipelineId(id, opts);
        yield download(job.id, opts);
    });
}
exports.runAndDownloadById = runAndDownloadById;
//# sourceMappingURL=job.js.map