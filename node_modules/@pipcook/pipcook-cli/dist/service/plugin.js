"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.info = exports.list = exports.uninstall = exports.install = exports.installFromRemote = exports.installFromLocal = void 0;
const path_1 = __importDefault(require("path"));
const sdk_1 = require("@pipcook/sdk");
const pipcook_core_1 = require("@pipcook/pipcook-core");
const child_process_1 = require("child_process");
const fs_extra_1 = __importDefault(require("fs-extra"));
const config_1 = require("../config");
const common_1 = require("../utils/common");
/**
 * trace install event
 * this function throws error
 * @param traceObj trace object
 * @param opts opts from args
 */
function traceInstallEvent(traceObj, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        if (traceObj.status === pipcook_core_1.PluginStatus.INSTALLED) {
            return traceObj;
        }
        yield client.plugin.traceEvent(traceObj.traceId, common_1.traceLogger);
        // confirm if the plugin installed successfully
        const plugin = yield client.plugin.get(traceObj.id);
        if (plugin) {
            if (plugin.status === pipcook_core_1.PluginStatus.INSTALLED) {
                common_1.logger.success('install successfully');
                return plugin;
            }
            else {
                throw new Error(`plugin install failed: ${plugin.error}`);
            }
        }
        else {
            throw new Error('can\'t find the plugin after installation');
        }
    });
}
/**
 * install the package from local path
 * this function throws error
 * @param localPath package local path
 * @param opts opts from args
 */
function installFromLocal(localPath, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        let pkg;
        try {
            pkg = yield fs_extra_1.default.readJSON(path_1.default.join(localPath, 'package.json'));
            common_1.logger.start(`installing ${pkg.name} from ${localPath}`);
        }
        catch (err) {
            throw new TypeError(`read package.json error: ${err.message}`);
        }
        if (!(pkg === null || pkg === void 0 ? void 0 : pkg.pipcook)) {
            throw new TypeError('invalid plugin package');
        }
        const output = child_process_1.spawnSync('npm', ['pack'], { cwd: localPath });
        let tarball;
        if (output.status !== 0) {
            throw new TypeError(`read local package error: ${output.stderr.toString()}`);
        }
        else {
            tarball = output.stdout.toString().replace(/[\n\r]/g, '');
        }
        const fstream = fs_extra_1.default.createReadStream(path_1.default.join(localPath, tarball));
        const resp = yield client.plugin.createByTarball(fstream, opts.tuna ? config_1.tunaMirrorURI : undefined);
        yield fs_extra_1.default.remove(path_1.default.join(localPath, tarball));
        if (resp.status === pipcook_core_1.PluginStatus.INSTALLED) {
            common_1.logger.success(`${pkg.name} already installed`);
            return resp;
        }
        else {
            const plugin = yield traceInstallEvent(resp, opts);
            common_1.logger.success(`install ${pkg.name}@${pkg.version} successfully`);
            return plugin;
        }
    });
}
exports.installFromLocal = installFromLocal;
function installFromRemote(uriOrName, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        common_1.logger.start(`fetching package info ${uriOrName}`);
        const resp = yield client.plugin.createByName(uriOrName, opts.tuna ? config_1.tunaMirrorURI : undefined);
        if (resp.status === pipcook_core_1.PluginStatus.INSTALLED) {
            common_1.logger.success(`plugin ${resp.name}@${resp.version} has already been installed`);
            return resp;
        }
        if (resp.traceId) {
            yield traceInstallEvent(resp, opts);
        }
        const plugin = yield client.plugin.get(resp.id);
        if (plugin.status !== pipcook_core_1.PluginStatus.INSTALLED) {
            throw new TypeError(`Plugin ${plugin.name} install failed`);
        }
        common_1.logger.success(`install ${resp.name}@${resp.version} successfully`);
        return plugin;
    });
}
exports.installFromRemote = installFromRemote;
function install(name, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        common_1.logger.start(`installing plugin ${name}`);
        if (name[0] === '.') {
            name = path_1.default.join(process.cwd(), name);
        }
        try {
            if ((yield fs_extra_1.default.pathExists(name)) && (yield fs_extra_1.default.stat(name)).isDirectory()) {
                // install from local package directory
                return yield installFromLocal(name, opts);
            }
            else {
                // install from package name, git, etc.
                return yield installFromRemote(name, opts);
            }
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.install = install;
function uninstall(name, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        common_1.logger.start(`uninstalling ${name}`);
        const plugins = yield client.plugin.list({ name });
        if (plugins.length > 0) {
            try {
                yield client.plugin.remove(plugins[0].id);
                common_1.logger.success(`uninstalled ${name}`);
            }
            catch (err) {
                common_1.logger.fail(err.message);
            }
        }
        else {
            common_1.logger.fail(`not plugin found: ${name}`);
        }
    });
}
exports.uninstall = uninstall;
function list(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        const plugins = yield client.plugin.list(opts);
        if (plugins.length === 0) {
            common_1.logger.info('no plugin installed.');
        }
        else {
            console.table(plugins.map((plugin) => {
                return Object.assign(Object.assign({}, plugin), { status: sdk_1.PluginStatusValue[plugin.status] });
            }), ['id', 'name', 'version', 'category', 'datatype', 'status']);
        }
    });
}
exports.list = list;
function info(id, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = common_1.initClient(opts.hostIp, opts.port);
        try {
            const plugin = yield client.plugin.get(id);
            console.log(JSON.stringify(plugin, undefined, 2));
        }
        catch (err) {
            common_1.logger.fail(err.message);
        }
    });
}
exports.info = info;
//# sourceMappingURL=plugin.js.map