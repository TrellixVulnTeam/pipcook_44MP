"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipeline = void 0;
const request_1 = require("./request");
const base_1 = require("./base");
/**
 * API for pipeline
 */
class Pipeline extends base_1.BaseApi {
    constructor(url) {
        super(`${url}/pipeline`);
        this.info = this.get;
    }
    /**
     * list all pipelines
     * @param filter the filter option to list pipelines
     */
    list(filter) {
        return request_1.get(`${this.route}`, filter);
    }
    /**
     * get pipeline info by pipeline id
     * @param id pipeline id
     */
    get(id) {
        return request_1.get(`${this.route}/${id}`);
    }
    /**
     * get pipeline config by pipeline id
     * @param id pipeline id
     */
    getConfig(id) {
        return request_1.get(`${this.route}/${id}/config`);
    }
    /**
     * create a pipeline by pipeline config object
     * @param config pipeline config
     * @param opts name: pipeline name
     */
    create(config, opts) {
        return request_1.post(`${this.route}`, {
            config,
            name: opts === null || opts === void 0 ? void 0 : opts.name
        });
    }
    /**
     * create a pipeline by pipeline config uri
     * @param configUri pipeline config file uri
     * @param opts name: pipeline name
     */
    createByUri(configUri, opts) {
        return request_1.post(`${this.route}`, {
            configUri,
            name: opts === null || opts === void 0 ? void 0 : opts.name
        });
    }
    /**
     * update pipeline config
     * @param id pipeline id
     * @param config pipeline config
     */
    update(id, config) {
        return request_1.put(`${this.route}/${id}`, {
            config
        });
    }
    /**
     * remove pipeline by id, if the id is undefined, remove all
     * @param id pipline id or undefined
     */
    remove(id) {
        return request_1.del(`${this.route}/${id ? id : ''}`);
    }
    /**
     * install plugins defined in pipeline
     * @param id pipeline id
     * @param opt installation options
     */
    install(id, opt) {
        return request_1.post(`${this.route}/${id}/installation`, opt);
    }
}
exports.Pipeline = Pipeline;
//# sourceMappingURL=pipeline.js.map