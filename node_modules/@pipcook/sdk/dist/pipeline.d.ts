import { PipelineResp, PipelineInstallOption, TraceResp, ListFilter, PipelineConfig } from './interface';
import { BaseApi } from './base';
/**
 * API for pipeline
 */
export declare class Pipeline extends BaseApi {
    constructor(url: string);
    /**
     * list all pipelines
     * @param filter the filter option to list pipelines
     */
    list(filter?: ListFilter): Promise<PipelineResp[]>;
    /**
     * get pipeline info by pipeline id
     * @param id pipeline id
     */
    get(id: string): Promise<PipelineResp>;
    info: (id: string) => Promise<PipelineResp>;
    /**
     * get pipeline config by pipeline id
     * @param id pipeline id
     */
    getConfig(id: string): Promise<PipelineConfig>;
    /**
     * create a pipeline by pipeline config object
     * @param config pipeline config
     * @param opts name: pipeline name
     */
    create(config: PipelineConfig, opts?: any): Promise<PipelineResp>;
    /**
     * create a pipeline by pipeline config uri
     * @param configUri pipeline config file uri
     * @param opts name: pipeline name
     */
    createByUri(configUri: string, opts?: any): Promise<PipelineResp>;
    /**
     * update pipeline config
     * @param id pipeline id
     * @param config pipeline config
     */
    update(id: string, config: PipelineConfig): Promise<PipelineResp>;
    /**
     * remove pipeline by id, if the id is undefined, remove all
     * @param id pipline id or undefined
     */
    remove(id?: string): Promise<void>;
    /**
     * install plugins defined in pipeline
     * @param id pipeline id
     * @param opt installation options
     */
    install(id: string, opt?: PipelineInstallOption): Promise<TraceResp<PipelineResp>>;
}
