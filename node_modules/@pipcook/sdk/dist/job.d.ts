import { FileDownloadResp } from './request';
import { BaseApi } from './base';
import { JobResp, TraceResp, JobListFilter } from './interface';
/**
 * Job API object.
 */
export declare class Job extends BaseApi {
    /**
     * Use PipcookClient instead.
     * @private
     */
    constructor(url: string);
    /**
     * list all jobs.
     * @param filter the filter to list the jobs.
     * @returns The jobs list.
     */
    list(filter?: JobListFilter): Promise<JobResp[]>;
    /**
     * remove pipeline by id, if the id is undefined remove all
     * @param id pipline id or undefined
     */
    remove(id?: string): Promise<void>;
    /**
     * get job info by job id
     * @param id job id
     */
    get(id: string): Promise<JobResp>;
    info: (id: string) => Promise<JobResp>;
    /**
     * cancel job by id
     * @param id job id
     */
    cancel(id: string): Promise<void>;
    /**
     * get job log
     * @param id job id
     */
    log(id: string): Promise<any>;
    /**
     * start to run a pipeline by pipeline id
     * @param piplineId pipeline id
     */
    run(pipelineId: string): Promise<TraceResp<JobResp>>;
    /**
     * download model by job id
     * you should check the job status before downloading
     * @param id job id
     */
    downloadOutput(id: string): Promise<FileDownloadResp>;
    /**
     * generate the download url for given job id
     * @param id job id
     * @experimental
     */
    getOutputDownloadURL(id: string): string;
}
