"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listen = exports.getFile = exports.uploadFile = exports.get = exports.del = exports.put = exports.post = void 0;
const qs = __importStar(require("querystring"));
const axios_1 = __importDefault(require("axios"));
const eventsource_1 = __importDefault(require("eventsource"));
const util_1 = require("util");
const form_data_1 = __importDefault(require("form-data"));
axios_1.default.defaults.timeout = 60000;
function createGeneralRequest(agent) {
    return (...args) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        try {
            const response = yield agent(...args);
            if (response.status >= 200 && response.status < 300) {
                return response.data;
            }
            else {
                throw new Error((_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.message);
            }
        }
        catch (err) {
            throw new Error(((_c = (_b = err.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message) || err.message);
        }
    });
}
exports.post = (host, body, params, config) => __awaiter(void 0, void 0, void 0, function* () { return createGeneralRequest(axios_1.default.post)(host, body, params, config); });
exports.put = (host, body, params, config) => __awaiter(void 0, void 0, void 0, function* () { return createGeneralRequest(axios_1.default.put)(host, body, params, config); });
exports.del = (host) => __awaiter(void 0, void 0, void 0, function* () { return createGeneralRequest(axios_1.default.delete)(host); });
exports.get = (host, params, config) => __awaiter(void 0, void 0, void 0, function* () {
    let uri;
    if (params) {
        uri = `${host}?${qs.stringify(params)}`;
    }
    else {
        uri = host;
    }
    return createGeneralRequest(axios_1.default.get)(uri, config);
});
exports.uploadFile = (host, fileStream, params) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    const form = new form_data_1.default();
    for (const key in params) {
        if (params[key]) {
            form.append(key, params[key]);
        }
    }
    form.append('file', fileStream);
    const getLength = util_1.promisify(form.getLength.bind(form));
    const length = yield getLength();
    const headers = Object.assign({ 'Content-Length': length }, form.getHeaders());
    try {
        const response = yield axios_1.default.post(host, form, { headers });
        if (response.status >= 200 && response.status < 300) {
            return response.data;
        }
        else {
            throw new Error((_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.message);
        }
    }
    catch (err) {
        throw new Error(((_c = (_b = err.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message) || err.message);
    }
});
exports.getFile = (host, params) => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield axios_1.default({
        method: 'GET',
        url: `${host}?${qs.stringify(params)}`,
        responseType: 'stream'
    });
    const totalBytes = parseInt(resp.headers['content-length'], 10);
    return { totalBytes, stream: resp.data };
});
exports.listen = (host, params, handlers) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        let handshaked = false;
        const uri = `${host}${params ? `?${qs.stringify(params)}` : ''}`;
        const es = new eventsource_1.default(uri);
        const timeoutHandle = setTimeout(() => {
            es.close();
            reject(new Error(`listen timeout: ${uri}`));
        }, 5000);
        const onerror = (e) => {
            if (handshaked === false) {
                es.close();
                clearTimeout(timeoutHandle);
                es.removeEventListener('error', onerror);
                reject(new Error(`listen error: ${e.type}`));
            }
            else if (typeof handlers.error === 'function') {
                // manually pass the `error` event to user-defined handler.
                handlers.error(e);
            }
        };
        es.addEventListener('error', onerror);
        es.addEventListener('session', (e) => {
            if (e.data === 'close') {
                // close the connection and mark the handshaked is disabled.
                handshaked = false;
                es.close();
                if (typeof handlers.close === 'function') {
                    handlers.close(e);
                }
            }
            else if (e.data === 'start') {
                handshaked = true;
                // if `handlers.error` not defined, remove the listener directly.
                if (typeof handlers.error !== 'function') {
                    es.removeEventListener('error', onerror);
                }
                // clear the timeout handle because handshake is finished.
                clearTimeout(timeoutHandle);
                resolve(es);
            }
        });
        // register extra handlers.
        Object.keys(handlers)
            // handle `handlers.error` manually.
            .filter((name) => name !== 'error')
            .forEach((name) => {
            es.addEventListener(name, handlers[name]);
        });
    });
});
//# sourceMappingURL=request.js.map