/// <reference types="node" />
import { BaseApi } from './base';
import { PluginResp, TraceResp, PluginListParams } from './interface';
import { ReadStream } from 'fs-extra';
/**
 * API for plugin
 */
export declare class Plugin extends BaseApi {
    constructor(url: string);
    /**
     * list all plugins
     * @param params params
     */
    list(params?: PluginListParams): Promise<PluginResp[]>;
    /**
     * get plugin by id
     * @param id string plugin id
     */
    get(id: string): Promise<PluginResp>;
    /**
     * get plugin metadata by id
     * @param id string plugin id
     */
    fetch(id: string): Promise<any>;
    /**
     * fetch specific plugin metadata by name
     * @param name the plugin name, for example "@pipcook/plugins-image-classification-data-collect"
     */
    fetchByName(name: string): Promise<any>;
    /**
     * remove plugin or plugins
     * @param id string if null, remove all
     */
    remove(id?: string): Promise<void>;
    /**
     * create by package name
     * @param name package name
     * @param pyIndex the python package index
     */
    createByName(name: string, pyIndex?: string): Promise<TraceResp<PluginResp>>;
    /**
     * create by package stream
     * @param pkgStream file stream
     * @param pyIndex the python package index
     */
    createByTarball(pkgStream: ReadStream, pyIndex?: string): Promise<TraceResp<PluginResp>>;
}
