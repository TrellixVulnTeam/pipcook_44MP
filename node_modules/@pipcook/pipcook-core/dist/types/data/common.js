"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLoader = void 0;
const events_1 = __importDefault(require("events"));
const public_1 = require("../../utils/public");
/**
 * The data loader to used to load dataset.
 */
class DataLoader {
    constructor() {
        this.event = new events_1.default.EventEmitter();
        this.fetchIndex = 0;
        this.id = public_1.generateId();
        this.processIndex = -1;
    }
    notifyProcess() {
        this.event.emit(this.id);
    }
    getFetchIndex() {
        return this.fetchIndex;
    }
    /**
     * iterate over dataset. Get next single sample
     * Override Forbidden
     */
    next() {
        return __awaiter(this, void 0, void 0, function* () {
            // reset index of data fetched to beginning when it reaches the end
            if (this.fetchIndex >= (yield this.len())) {
                this.fetchIndex = 0;
            }
            // if the data fetched has already been processed, return it
            if (this.fetchIndex < this.processIndex || this.processIndex === -1) {
                return this.getItem(this.fetchIndex++);
            }
            // if data fetched not already processed, wait util this is finished
            return new Promise((resolve) => {
                this.event.on(this.id, () => __awaiter(this, void 0, void 0, function* () {
                    if (this.fetchIndex < this.processIndex) {
                        const data = yield this.getItem(this.fetchIndex++);
                        this.event.removeAllListeners(this.id);
                        resolve(data);
                    }
                }));
            });
        });
    }
    /**
     * iterate over dataset. Get next batch of data
     * Override Forbidden
     */
    nextBatch(batchSize) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataLen = yield this.len();
            if (this.fetchIndex >= dataLen - 1) {
                this.fetchIndex = 0;
            }
            if (this.fetchIndex + batchSize >= dataLen) {
                batchSize = dataLen - this.fetchIndex - 1;
            }
            if (this.fetchIndex + batchSize < this.processIndex) {
                const result = [];
                for (let i = this.fetchIndex; i < this.fetchIndex + batchSize; i++) {
                    result.push(this.getItem(i));
                }
                this.fetchIndex += batchSize;
                return Promise.all(result);
            }
            return new Promise((resolve) => {
                this.event.on(this.id, () => __awaiter(this, void 0, void 0, function* () {
                    if (this.fetchIndex + batchSize < this.processIndex) {
                        const result = [];
                        for (let i = this.fetchIndex; i < this.fetchIndex + batchSize; i++) {
                            result.push(this.getItem(i));
                        }
                        this.fetchIndex += batchSize;
                        this.event.removeAllListeners(this.id);
                        resolve(yield Promise.all(result));
                    }
                }));
            });
        });
    }
}
exports.DataLoader = DataLoader;
//# sourceMappingURL=common.js.map