import { Statistic } from '../other';
/**
 * The descriptor for sample data or label.
 */
export interface DataDescriptor {
    type?: any;
    shape?: number[];
    names?: string[];
}
/**
 * The metadata is to describe a dataset.
 */
export interface Metadata extends Record<string, any> {
    /**
     * The feature descriptor.
     */
    feature?: DataDescriptor;
    /**
     * The label descriptor.
     */
    label?: DataDescriptor;
    /**
     * The label maps for a dataset, which is the available list for corresponding labels.
     */
    labelMap?: Record<string, number> | string[];
}
/**
 * A sample is to represent an item in a dataset.
 */
export interface Sample {
    /**
     * the sample data.
     */
    data: any;
    /**
     * the sample label.
     */
    label?: any;
}
/**
 * The data loader to used to load dataset.
 */
export declare abstract class DataLoader {
    private event;
    private fetchIndex;
    private id;
    processIndex: number;
    /**
     * Data-access plugin developer needs to implement these three abstract function
     * which is to notify the length of data, how to get and set the specific index of data
     */
    abstract len(): Promise<number>;
    abstract getItem(id: number): Promise<Sample>;
    abstract setItem(id: number, sample: Sample): Promise<void>;
    notifyProcess(): void;
    getFetchIndex(): number;
    /**
     * iterate over dataset. Get next single sample
     * Override Forbidden
     */
    next(): Promise<Sample>;
    /**
     * iterate over dataset. Get next batch of data
     * Override Forbidden
     */
    nextBatch(batchSize: number): Promise<Sample[]>;
}
/**
 * This interface is used for representing a dataset.
 */
export interface UniDataset {
    /**
     * The metadata for this dataset.
     */
    metadata?: Metadata;
    /**
     * The statistics for the dataset.
     */
    dataStatistics: Statistic[];
    /**
     * The validation result for this dataset.
     */
    validationResult: {
        result: boolean;
        message?: string;
    };
    /**
     * The batch size for this dataset
     */
    batchSize?: number;
    /**
     * The loader for training.
     */
    trainLoader?: DataLoader;
    /**
     * The loader for validation.
     */
    validationLoader?: DataLoader;
    /**
     * The loader for testing the trained model.
     */
    testLoader?: DataLoader;
}
