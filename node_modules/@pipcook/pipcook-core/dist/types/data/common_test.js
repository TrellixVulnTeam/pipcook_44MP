"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
class LocalDataLoader extends common_1.DataLoader {
    len() {
        return __awaiter(this, void 0, void 0, function* () {
            return 10;
        });
    }
    getItem() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                data: Math.random(),
                label: Math.random
            };
        });
    }
    setItem() {
        return null;
    }
}
describe('test dataloder', () => {
    it('should return data immediately when data is ready', () => __awaiter(void 0, void 0, void 0, function* () {
        const dataLoader = new LocalDataLoader();
        dataLoader.processIndex = 5;
        const nextData = yield dataLoader.next();
        const nextDataBatch = yield dataLoader.nextBatch(2);
        expect(nextData === null || nextData === void 0 ? void 0 : nextData.data).not.toBeNull();
        expect(nextData === null || nextData === void 0 ? void 0 : nextData.label).not.toBeNull();
        expect(nextDataBatch === null || nextDataBatch === void 0 ? void 0 : nextDataBatch.length).toBe(2);
    }));
    it('should wait until data is processed', () => __awaiter(void 0, void 0, void 0, function* () {
        const dataLoader = new LocalDataLoader();
        dataLoader.processIndex = 1;
        setTimeout(() => {
            dataLoader.processIndex = 5;
            dataLoader.notifyProcess();
        }, 1000);
        const nextDataBatch = yield dataLoader.nextBatch(3);
        expect(nextDataBatch === null || nextDataBatch === void 0 ? void 0 : nextDataBatch.length).toBe(3);
    }), 3000);
    it('should read data from beginning when it reaches end', () => __awaiter(void 0, void 0, void 0, function* () {
        const dataLoader = new LocalDataLoader();
        dataLoader.processIndex = 5;
        yield dataLoader.nextBatch(4);
        expect(dataLoader.getFetchIndex()).toBe(4);
    }));
    it('next batch should be updated', () => __awaiter(void 0, void 0, void 0, function* () {
        const dataLoader = new LocalDataLoader();
        dataLoader.processIndex = 9;
        yield dataLoader.nextBatch(4);
        const recordIndex = dataLoader.getFetchIndex();
        yield dataLoader.nextBatch(4);
        const compareIndex = dataLoader.getFetchIndex();
        expect(recordIndex).not.toEqual(compareIndex);
    }));
});
//# sourceMappingURL=common_test.js.map