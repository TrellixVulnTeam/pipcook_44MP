"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePluginName = void 0;
const url = __importStar(require("url"));
const path = __importStar(require("path"));
/**
 * parse plugin name, return the plugin protocol and url object
 */
function parsePluginName(name) {
    const urlObject = url.parse(name);
    let protocol;
    if (path.isAbsolute(name)) {
        protocol = 'fs';
    }
    else if (/^git(\+ssh|\+https|\+http)?:$/.test(urlObject.protocol)) {
        protocol = 'git';
    }
    else if (['https:', 'http:'].indexOf(urlObject.protocol) !== -1
        && (urlObject.path.endsWith('.tgz') || urlObject.path.endsWith('.gz'))) {
        protocol = 'tarball';
    }
    else if (name[0] !== '.' && !urlObject.protocol) {
        protocol = 'npm';
    }
    else {
        throw new TypeError(`Unsupported resolving plugin name: ${name}`);
    }
    return { protocol, urlObject };
}
exports.parsePluginName = parsePluginName;
//# sourceMappingURL=common.js.map