"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const public_1 = require("./public");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const __1 = require("..");
const os_1 = require("os");
const xml2js = require('xml2js');
describe('public utils', () => {
    it('should generate correct coco json from pascal voc format', () => __awaiter(void 0, void 0, void 0, function* () {
        const dir = process.cwd();
        const file = public_1.generateId();
        yield public_1.createAnnotationFromJson(dir, {
            annotation: {
                folder: [
                    dir
                ],
                filename: [
                    file + '.jpg'
                ],
                size: [
                    {
                        width: [
                            '750'
                        ],
                        height: [
                            '310'
                        ]
                    }
                ],
                object: [
                    {
                        name: [
                            'test'
                        ],
                        bndbox: [
                            {
                                xmin: [
                                    '134'
                                ],
                                ymin: [
                                    '0'
                                ],
                                xmax: [
                                    '325'
                                ],
                                ymax: [
                                    '310'
                                ]
                            }
                        ]
                    }
                ]
            }
        });
        yield public_1.convertPascal2CocoFileOutput([path.join(dir, file + '.xml')], path.join(dir, file + '.json'));
        const json = yield fs.readJSON(path.join(dir, file + '.json'));
        expect(json.annotations[0].image_id).toBe(1);
        yield fs.remove(file + '.json');
        yield fs.remove(file + '.xml');
    }));
    it('test if the array is shuffled', () => {
        const array = [1, 2, 3, 4, 5];
        public_1.shuffle(array);
        array.sort();
        expect(array).toEqual([1, 2, 3, 4, 5]);
    });
    it('test if annotation file was generated correctly', () => __awaiter(void 0, void 0, void 0, function* () {
        const annotationDir = path.join(__1.constants.PIPCOOK_TMPDIR, 'testAnnotation');
        yield fs.mkdirp(annotationDir);
        yield public_1.createAnnotationFile(annotationDir, 'test.jpg', annotationDir, 'for-test');
        const xmlFilename = path.join(annotationDir, 'test.xml');
        const jsonData = yield (new xml2js.Parser()).parseStringPromise(yield fs.readFile(xmlFilename));
        expect(jsonData.annotation.filename[0]).toBe('test.jpg');
        expect(jsonData.annotation.folder[0]).toBe(annotationDir);
        expect(jsonData.annotation.object[0].name[0]).toBe('for-test');
        const parsedData = yield public_1.parseAnnotation(xmlFilename);
        expect(parsedData.annotation.filename[0]).toBe('test.jpg');
        expect(parsedData.annotation.folder[0]).toBe(annotationDir);
        expect(parsedData.annotation.object[0].name[0]).toBe('for-test');
        fs.remove(annotationDir);
    }));
    it('test get the model path name', () => {
        const pathname = public_1.getModelDir('test');
        expect(pathname.endsWith('test/model')).toBe(true);
    });
    it('test transformCsv', () => {
        const strFromCsv = public_1.transformCsv('1, 2, "a", "b", 3.14, "2020-07-18 13:51:00", "img.jpg"');
        expect(strFromCsv).toBe('"1, 2, ""a"", ""b"", 3.14, ""2020-07-18 13:51:00"", ""img.jpg"""');
    });
    it('test os info', () => __awaiter(void 0, void 0, void 0, function* () {
        const os = yield public_1.getOsInfo();
        switch (os_1.platform()) {
            case 'linux':
                expect(os).toBe('linux');
                break;
            case 'darwin':
                expect(os).toBe('mac');
                break;
            case 'win32':
                expect(os).toBe('windows');
                break;
            default:
                expect(os).toBe('other');
        }
    }));
});
describe('test compress utils', () => {
    it('compress dir to tmp dir', () => __awaiter(void 0, void 0, void 0, function* () {
        const tarFilename = path.join(__1.constants.PIPCOOK_TMPDIR, public_1.generateId() + '.tar');
        yield public_1.compressTarFile(__filename, tarFilename);
        expect(yield fs.pathExists(tarFilename)).toEqual(true);
        yield fs.remove(tarFilename);
    }));
});
describe('test downloading utils', () => {
    it('download a remote zip package and extract to tmp dir', () => __awaiter(void 0, void 0, void 0, function* () {
        const tmpDir = yield public_1.downloadAndExtractTo('http://ai-sample.oss-cn-hangzhou.aliyuncs.com/image_classification/datasets/textClassification.zip');
        expect(yield fs.pathExists(tmpDir + '/test')).toEqual(true);
        expect(yield fs.pathExists(tmpDir + '/train')).toEqual(true);
        yield fs.remove(tmpDir);
    }));
    it('download a remote json file to tmp dir', () => __awaiter(void 0, void 0, void 0, function* () {
        const tmpDir = yield public_1.downloadAndExtractTo('https://raw.githubusercontent.com/DavidCai1993/chinese-poem-generator.js/master/test/data/poet.song.91000.json');
        expect(tmpDir.indexOf('poet.song.91000.json') !== -1).toEqual(true);
        expect(yield fs.pathExists(tmpDir)).toEqual(true);
        yield fs.remove(tmpDir);
    }));
    it('download from local directory', () => __awaiter(void 0, void 0, void 0, function* () {
        const tmpDir = yield public_1.downloadAndExtractTo('http://ai-sample.oss-cn-hangzhou.aliyuncs.com/image_classification/datasets/textClassification.zip');
        const tmpDir2 = yield public_1.downloadAndExtractTo(`file://${tmpDir}`);
        expect(yield fs.pathExists(tmpDir2 + '/test')).toEqual(true);
        expect(yield fs.pathExists(tmpDir2 + '/train')).toEqual(true);
        yield fs.remove(tmpDir);
        yield fs.remove(tmpDir2);
    }));
    it('download from local directory', () => __awaiter(void 0, void 0, void 0, function* () {
        const tmpDir = yield public_1.downloadAndExtractTo('http://ai-sample.oss-cn-hangzhou.aliyuncs.com/image_classification/datasets/textClassification.zip');
        const tmpDir2 = yield public_1.downloadAndExtractTo(`file://${tmpDir}`);
        expect(yield fs.pathExists(tmpDir2 + '/test')).toEqual(true);
        expect(yield fs.pathExists(tmpDir2 + '/train')).toEqual(true);
        yield fs.remove(tmpDir);
        yield fs.remove(tmpDir2);
    }));
    it('test if remote file was downloaded', () => __awaiter(void 0, void 0, void 0, function* () {
        const jsonFile = path.join(__1.constants.PIPCOOK_TMPDIR, public_1.generateId() + '.json');
        yield public_1.download('https://raw.githubusercontent.com/DavidCai1993/chinese-poem-generator.js/master/test/data/poet.song.91000.json', jsonFile);
        expect(yield fs.pathExists(jsonFile)).toBe(true);
        const stats = yield fs.stat(jsonFile);
        expect(stats.size).toBeGreaterThan(0);
    }));
});
describe('test id utils', () => {
    it('id generator', () => __awaiter(void 0, void 0, void 0, function* () {
        const id = public_1.generateId();
        expect(typeof id).toEqual('string');
        expect(id.length).toEqual(8);
        for (let i = 0; i < id.length; ++i) {
            const c = id.charCodeAt(i);
            expect(c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)
                || c >= '0'.charCodeAt(0) && c <= '9'.charCodeAt(0)).toBe(true);
        }
    }));
});
//# sourceMappingURL=public_test.js.map