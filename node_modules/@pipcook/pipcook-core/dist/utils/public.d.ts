/**
 * This function is used to create annotation file for image claasifiaction.  PASCOL VOC format.
 * For more info, you can check the sources codes of plugin: @pipcook/pipcook-plugins-image-class-data-collect
 * @param annotationDir : annotation directory
 * @param filename : image file name
 * @param url : image path
 * @param category : image classification category name
 */
export declare function createAnnotationFile(annotationDir: string, filename: string, url: string, category: string): Promise<void>;
/**
 * create annotation file for object detection. PASCOL VOC format.
 * For more info, you can check the sources codes of plugin: @pipcook/pipcook-plugins-image-detection-data-collect
 * @param annotationDir : annotation directory
 * @param json : json file that will be filled into xml
 */
export declare function createAnnotationFromJson(annotationDir: string, json: any): Promise<void>;
/**
 * parse the xml file and read into json data
 * filename: file path of xml file
 */
export declare function parseAnnotation(filename: string): Promise<any>;
/**
 * download the file and stored in specified directory
 * @param url: url of the file
 * @param: full path of file that will be stored
 */
export declare function download(url: string, fileName: string): Promise<void>;
/**
 * Download the dataset from specific URL and extract to a generated path as the returned value.
 * @param resUrl the resource url, support http://, https://, file:///.
 */
export declare function downloadAndExtractTo(resUrl: string): Promise<string>;
export declare function compressTarFile(sourcePath: string, targetPath: string): Promise<void>;
/**
 * unzip compressed data
 * @param filePath : path of zip
 * @param targetPath : target full path
 */
export declare function unZipData(filePath: string, targetPath: string): Promise<void>;
/**
 * get pipcook model path
 */
export declare function getModelDir(jobId: string): string;
/**
 * get pipcook log's sample data's metadata according to modelId
 */
export declare function getMetadata(jobId: string): any;
/**
 * transform a string to its csv suitable format
 * @param text the text to be converted
 */
export declare function transformCsv(text: string): string;
/**
 * converter between PASCOL VOC format and COCO data format
 * @param files : paths of xml files
 * @param targetPath target output path
 */
export declare function convertPascal2CocoFileOutput(files: string[], targetPath: string): Promise<void>;
/**
 * return that current system is:
 * mac / linux / windows / other
 */
export declare function getOsInfo(): Promise<string>;
/**
 * Shuffles array in place. ES6 version. This method is based on Fisher-Yates shuffle algorithm
 * @param array An array containing the items.
 */
export declare function shuffle(array: any[]): void;
/**
 * generate id
 */
export declare function generateId(): string;
