"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
describe('test plugin name parser', () => {
    it('parse from package name', () => __awaiter(void 0, void 0, void 0, function* () {
        const { protocol } = common_1.parsePluginName('@pipcook/core');
        expect(protocol).toEqual('npm');
        const { protocol: protocolWithScope } = common_1.parsePluginName('core');
        expect(protocolWithScope).toEqual('npm');
    }));
    it('parse from tarball .tgz', () => __awaiter(void 0, void 0, void 0, function* () {
        const url = 'http://a.b.c:9090/core.tgz';
        const { protocol, urlObject } = common_1.parsePluginName(url);
        expect(protocol).toEqual('tarball');
        expect(urlObject.href).toEqual(url);
    }));
    it('parse from tarball .gz', () => __awaiter(void 0, void 0, void 0, function* () {
        const url = 'http://a.b.c:9090/core.gz';
        const { protocol, urlObject } = common_1.parsePluginName(url);
        expect(protocol).toEqual('tarball');
        expect(urlObject.href).toEqual(url);
    }));
    it('parse from unknown url', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            const url = 'http://a.b.c:9090/core.zip';
            common_1.parsePluginName(url);
        }).toThrowError(TypeError);
    }));
    it('parse from git+ssh', () => __awaiter(void 0, void 0, void 0, function* () {
        const url = 'git+ssh://a.b.c:9090/project@v1.0';
        const { protocol, urlObject } = common_1.parsePluginName(url);
        expect(protocol).toEqual('git');
        expect(urlObject.href).toEqual(url);
    }));
    it('parse from git+https', () => __awaiter(void 0, void 0, void 0, function* () {
        const url = 'git+https://github.com/foobar/project@master';
        const { protocol, urlObject } = common_1.parsePluginName(url);
        expect(protocol).toEqual('git');
        expect(urlObject.href).toEqual(url);
    }));
    it('parse from git+http', () => __awaiter(void 0, void 0, void 0, function* () {
        const url = 'git+http://github.com/foobar/project@master';
        const { protocol, urlObject } = common_1.parsePluginName(url);
        expect(protocol).toEqual('git');
        expect(urlObject.href).toEqual(url);
    }));
    it('parse from invalid url', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            const url = './abc/tarball.tgz';
            common_1.parsePluginName(url);
        }).toThrowError(TypeError);
    }));
});
//# sourceMappingURL=common_test.js.map