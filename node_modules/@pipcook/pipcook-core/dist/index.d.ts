export { UniDataset, DataLoader, Metadata, DataDescriptor } from './types/data/common';
export { Sample } from './types/data/common';
export { ImageLabel, ImageMetadata, ImageSample, ImageDataLoader, ImageDataset, CocoDataset, VocDataset, SegmentationRLE, SegmentationPolygon } from './types/data/image';
export { CsvDataset, CsvDataLoader, CsvSample, CsvMetadata } from './types/data/csv';
export { UniModel } from './types/model';
export { DataCollectType, DataAccessType, DataProcessType, DatasetProcessType, ModelLoadType, ModelDefineType, ModelTrainType, ModelEvaluateType, ArgsType, ModelDefineArgsType, ModelTrainArgsType, PluginTypeI, PluginSourceProtocol as PluginProtocol, PipcookPlugin, PluginStatus } from './types/plugins';
export { EvaluateResult } from './types/other';
export { createAnnotationFile, parseAnnotation, unZipData, download, downloadAndExtractTo, getOsInfo, transformCsv, createAnnotationFromJson, getMetadata, getModelDir, convertPascal2CocoFileOutput, compressTarFile, shuffle, generateId } from './utils/public';
export { parsePluginName } from './utils/common';
export { OutputType } from './constants/other';
export { PipelineDBParams, PipelineStatus } from './types/database';
export { RunConfigI } from './types/config';
import * as OtherConstants from './constants/other';
export declare const constants: {
    PIPCOOK_HOME_PATH: string;
    PIPCOOK_PLUGINS: string;
    PIPCOOK_LOGS: string;
    PIPCOOK_DAEMON: string;
    PIPCOOK_DAEMON_SRC: string;
    PIPCOOK_DAEMON_PUBLIC: string;
    PIPCOOK_DAEMON_CONFIG: string;
    PIPCOOK_BOARD: string;
    PIPCOOK_BOARD_SRC: string;
    PIPCOOK_BOARD_BUILD: string;
    PIPCOOK_TMPDIR: string;
    KERAS_DIR: string;
    TORCH_DIR: string;
    PIPCOOK_DATASET: string;
    PIPCOOK_RUN: string;
    PIPCOOK_APP: string;
    PIPCOOK_STORAGE: string;
    OutputType: typeof OtherConstants.OutputType;
    DATACOLLECT: import("./types/plugins").PluginTypeI;
    DATAACCESS: import("./types/plugins").PluginTypeI;
    DATAPROCESS: import("./types/plugins").PluginTypeI;
    DATASETPROCESS: import("./types/plugins").PluginTypeI;
    MODELLOAD: import("./types/plugins").PluginTypeI;
    MODELDEFINE: import("./types/plugins").PluginTypeI;
    MODELTRAIN: import("./types/plugins").PluginTypeI;
    MODELEVALUATE: import("./types/plugins").PluginTypeI;
    PLUGINS: import("./types/plugins").PluginTypeI[];
};
